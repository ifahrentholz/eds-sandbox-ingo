{"version":3,"file":"fragment.js","sources":["../../src/app/tasks/loadBlocks.ts","../../src/blocks/fragment/fragment.ts"],"sourcesContent":["import { loadBlock } from './loadBlock';\n\n/**\n * Loads Blocks\n * by getting all sections and load every block in every section\n * and shows every section that is finished loading.\n * @param {Document | HTMLElement | null} main - The parent element to load blocks into.\n */\nexport async function loadBlocks(main: HTMLElement): Promise<void> {\n  const blocks = [...main.querySelectorAll<HTMLDivElement>('div.block')];\n  const blockPromises = blocks.map((block) => loadBlock(block));\n  await Promise.all(blockPromises);\n}\n","/*\n * Fragment Block\n * Include content on a page as a fragment.\n * https://www.aem.live/developer/block-collection/fragment\n */\n\nimport { loadBlocks } from '../../app/tasks/loadBlocks.js';\nimport './fragment.scss';\nimport { decorateButtons } from '../../app/tasks/decorateButtons.js';\nimport { transformSections } from '../../app/tasks/transformSections.js';\nimport { decorateBlocks } from '../../app/tasks/decorateBlocks.js';\n\n/**\n * Loads a fragment.\n * @param {string} path The path to the fragment\n * @returns {HTMLElement} The root element of the fragment\n */\nexport async function loadFragment(path: string) {\n  if (path && path.startsWith('/')) {\n    // eslint-disable-next-line no-param-reassign\n    path = path.replace(/(\\.plain)?\\.html/, '');\n    const resp = await fetch(`${path}.plain.html`);\n    if (resp.ok) {\n      const main = document.createElement('main');\n      main.innerHTML = await resp.text();\n\n      // reset base path for media to fragment base\n      const resetAttributeBase = (tag: string, attr: string) => {\n        main.querySelectorAll(`${tag}[${attr}^=\"./media_\"]`).forEach((elem) => {\n          elem[attr] = new URL(elem.getAttribute(attr) ?? '', new URL(path, window.location.origin)).href;\n        });\n      };\n      resetAttributeBase('img', 'src');\n      resetAttributeBase('source', 'srcset');\n\n      decorateButtons(main);\n      transformSections(main);\n      decorateBlocks(main);\n      await loadBlocks(main);\n      return main;\n    }\n  }\n  return null;\n}\n\nexport default async function decorate(block: HTMLElement) {\n  const link = block.querySelector('a');\n  const path = link ? link.getAttribute('href') : block.textContent?.trim();\n  if (!path) return;\n  const fragment = await loadFragment(path);\n  if (fragment) {\n    const fragmentSection = fragment.querySelector(':scope .section');\n    if (fragmentSection) {\n      block.classList.add(...fragmentSection.classList);\n      block.classList.remove('section');\n      block.replaceChildren(...fragmentSection.childNodes);\n    }\n  }\n}\n"],"names":["loadBlocks","main","blockPromises","block","loadBlock","loadFragment","path","resp","resetAttributeBase","tag","attr","elem","decorateButtons","transformSections","decorateBlocks","decorate","link","_a","fragment","fragmentSection"],"mappings":"uOAQA,eAAsBA,EAAWC,EAAkC,CAEjE,MAAMC,EADS,CAAC,GAAGD,EAAK,iBAAiC,WAAW,CAAC,EACxC,IAAKE,GAAUC,EAAUD,CAAK,CAAC,EACtD,MAAA,QAAQ,IAAID,CAAa,CACjC,CCKA,eAAsBG,EAAaC,EAAc,CAC/C,GAAIA,GAAQA,EAAK,WAAW,GAAG,EAAG,CAEzBA,EAAAA,EAAK,QAAQ,mBAAoB,EAAE,EAC1C,MAAMC,EAAO,MAAM,MAAM,GAAGD,CAAI,aAAa,EAC7C,GAAIC,EAAK,GAAI,CACL,MAAAN,EAAO,SAAS,cAAc,MAAM,EACrCA,EAAA,UAAY,MAAMM,EAAK,KAAK,EAG3B,MAAAC,EAAqB,CAACC,EAAaC,IAAiB,CACnDT,EAAA,iBAAiB,GAAGQ,CAAG,IAAIC,CAAI,eAAe,EAAE,QAASC,GAAS,CACrEA,EAAKD,CAAI,EAAI,IAAI,IAAIC,EAAK,aAAaD,CAAI,GAAK,GAAI,IAAI,IAAIJ,EAAM,OAAO,SAAS,MAAM,CAAC,EAAE,IAAA,CAC5F,CAAA,EAEH,OAAAE,EAAmB,MAAO,KAAK,EAC/BA,EAAmB,SAAU,QAAQ,EAErCI,EAAgBX,CAAI,EACpBY,EAAkBZ,CAAI,EACtBa,EAAeb,CAAI,EACnB,MAAMD,EAAWC,CAAI,EACdA,CACT,CACF,CACO,OAAA,IACT,CAEA,eAA8Bc,EAASZ,EAAoB,OACnD,MAAAa,EAAOb,EAAM,cAAc,GAAG,EAC9BG,EAAOU,EAAOA,EAAK,aAAa,MAAM,GAAIC,EAAAd,EAAM,cAAN,YAAAc,EAAmB,OACnE,GAAI,CAACX,EAAM,OACL,MAAAY,EAAW,MAAMb,EAAaC,CAAI,EACxC,GAAIY,EAAU,CACN,MAAAC,EAAkBD,EAAS,cAAc,iBAAiB,EAC5DC,IACFhB,EAAM,UAAU,IAAI,GAAGgB,EAAgB,SAAS,EAC1ChB,EAAA,UAAU,OAAO,SAAS,EAC1BA,EAAA,gBAAgB,GAAGgB,EAAgB,UAAU,EAEvD,CACF"}